"0","perform_pls <- function(X, Y, K){"
"0","  "
"0","  # Fit PLS model with my function"
"0","  pls_model <- riemannian_pls(X = X, Y = Y, L = K, tol = 1e-07, max.iter = 200,"
"0","                              type_x = ""euclidean"", type_y = ""euclidean"")"
"0","  "
"0","  # Extract relevant matrices"
"0","  P_fit <- do.call(cbind, pls_model$loadingsX)"
"0","  Q_fit <- do.call(cbind, pls_model$loadingsY)"
"0","  T_fit <- do.call(cbind, pls_model$scoresX)"
"0","  C_fit <- do.call(cbind, pls_model$weightsY)"
"0","  B_fit <- map_dbl(pls_model$reg_steps, ~.x$b1)"
"0","  "
"0","  # This stops tantrums"
"0","  if(K == 1){"
"0","    B_fit = matrix(B_fit)"
"0","  }else{"
"0","    B_fit <- diag(B_fit)"
"0","  }"
"0","  "
"0","  "
"0","  # Recover X and Y"
"0","  X_fit <- tcrossprod(T_fit, P_fit)"
"0","  Y_fit <- tcrossprod(tcrossprod(T_fit, B_fit), C_fit)"
"0","  "
"0","  # Return relevant matrices"
"0","  return(tibble("
"0","    P_fit = list(P_fit),"
"0","    Q_fit = list(Q_fit),"
"0","    X_fit = list(X_fit),"
"0","    Y_fit = list(Y_fit),"
"0","  ))"
"0","}"
"0",""
"0","calculate_subspace_distance <- function(U, V, K, L = 5){"
"0","  "
"0","  Uhat <- qr.Q(qr(U))"
"0","  Vhat <- qr.Q(qr(V))"
"0","  "
"0","  # cancor_uv <- cancor(U, V, xcenter = FALSE, ycenter = FALSE)"
"0","  uv_svd <- svd(crossprod(Uhat, Vhat))"
"0","  # return(uv_svd)"
"0","  uv_svd$d[uv_svd$d > 1 - 1e-8] <- 1"
"0","  "
"0","  dist <- sqrt(sum(acos(uv_svd$d)^2) + max(L - K, 0) * pi^2/4)"
"0","  "
"0","  return(dist)"
"0","}"
"0",""
"0","calculate_subspace_r2 <- function(U, V, K, L = 5){"
"0","  max_dist <- L * pi^2/4"
"0","  "
"0","  square_dist <- calculate_subspace_distance(U, V, K, L)^2"
"0","  "
"0","  r2 <- 1 - square_dist/max_dist"
"0","  "
"0","  return(r2)"
"0","}"
"0",""
"0","calculate_xy_rmse <- function(A, B){"
"0","  subs <- nrow(A)"
"0","  "
"0","  mse <- sum((A - B)^2)/subs"
"0","  "
"0","  return(sqrt(mse))"
"0","}"
"0",""
"0","calculate_xy_r2 <- function(est, truth){"
"0","  "
"0","  model_dist <- sum((est - truth)^2)"
"0","  "
"0","  centred_truth <- apply(truth, 2, scale, scale = FALSE)"
"0","  "
"0","  data_dist <- sum(centred_truth^2)"
"0","  "
"0","  r2 <- 1 - model_dist/data_dist"
"0","  "
"0","  return(r2)"
"0","}"
