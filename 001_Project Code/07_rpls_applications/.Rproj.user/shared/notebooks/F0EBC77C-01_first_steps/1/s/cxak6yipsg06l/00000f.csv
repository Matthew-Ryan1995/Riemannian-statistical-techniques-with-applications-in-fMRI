"0","get_model_metrics <- function(M, test_data, L){"
"0","  "
"0","  X_test <- test_data$cors"
"0","  Y_test <- model.matrix(~ age + group, data = test_data) %>% "
"0","    as.matrix() %>% "
"0","    .[, -1]"
"0","  "
"0","  if(isTRUE(M$type_y == ""euclidean"")){"
"0","    Y_test <- t(t(Y_test) - M$muY) "
"0","  }else{"
"0","    Y_test <- linearise_data(Y_test, M$muY)"
"0","  }"
"0","  "
"0","  preds <- predict.riemannian_pls(object = M, newdata = X_test, tol = 1e-4, max.iter = 20,"
"0","                                  num_comp = L, method = ""tangent"")"
"0","  "
"0","  r2 <- rsq.riemannian_pls(truth = Y_test, est = preds, muY = M$muY, m = M$muY,"
"0","                           type_y = ""euclidean"")"
"0","  rmse <- rmse.riemannian_pls(truth = Y_test, est = preds,"
"0","                              type_y = ""euclidean"")"
"0","  "
"0","  res <- "
"0","    tibble("
"0","      K = L,"
"0","      r2 = r2,"
"0","      rmse = rmse"
"0","    )"
"0","  "
"0","  return(res)"
"0","}"
"0","fit_and_test_single_fold <- function(cv_fold, formula = ~ 1){"
"0","  "
"0","  fold <- cv_fold$splits[[1]]"
"0","  id <- cv_fold$id"
"0","  "
"0","  train_data <- analysis(fold)"
"0","  test_data <- assessment(fold)"
"0","  "
"0","  K <- min(nrow(train_data) - 1, "
"0","           choose(nrow(train_data$cors[[1]]) + 1, 2))"
"0","  "
"0","  X <- train_data$cors"
"0","  Y <- model.matrix(formula, data = train_data) %>% "
"0","    as.matrix() %>% "
"0","    .[, -1]"
"0","  "
"0","  M <- riemannian_pls(X = X, Y = Y, L = K, tol = 1e-4, max.iter = 20, "
"0","                      type_x = ""affine"", type_y = ""euclidean"", method = ""tangent"")"
"0","  L <- 1:K"
"0","  "
"0","  fold_fit <- map_dfr(L,"
"0","                      function(l){"
"0","                        get_model_metrics(M = M, test_data = test_data, L = l)"
"0","                      })"
"0","  fold_fit <- fold_fit %>% "
"0","    mutate(id = id) %>% "
"0","    select(id, everything())"
"0","  "
"0","  return(fold_fit)"
"0","}"
"0","cv_rpls_fit <- function(full_folds, formula = ~ 1){"
"0","  V <- nrow(full_folds)"
"0","  res <- map_dfr(1:V, function(v){"
"0","    folds <- slice(full_folds, v)"
"0","    fit_and_test_single_fold(folds, formula = formula)"
"0","  }"
"0","  )"
"0","  "
"0","  return(res)"
"0","}"
